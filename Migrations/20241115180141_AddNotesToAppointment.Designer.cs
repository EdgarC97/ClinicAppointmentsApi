// <auto-generated />
using System;
using ClinicAppointmentsApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicAppointmentsApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241115180141_AddNotesToAppointment")]
    partial class AddNotesToAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalProblem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7554),
                            DoctorId = 1,
                            MedicalProblem = "Flu",
                            Notes = "Patient has had a fever for 3 days.",
                            PatientId = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7555)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2024, 5, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7557),
                            DoctorId = 2,
                            MedicalProblem = "Dental Pain",
                            Notes = "Patient complains of sharp pain in the molars.",
                            PatientId = 2,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7558)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2024, 5, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7559),
                            DoctorId = 3,
                            MedicalProblem = "Checkup",
                            Notes = "Routine checkup, no major issues found.",
                            PatientId = 3,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7559)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2024, 5, 15, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7561),
                            DoctorId = 4,
                            MedicalProblem = "Back Pain",
                            Notes = "Patient canceled the appointment due to feeling better.",
                            PatientId = 4,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7561)
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2024, 5, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7603),
                            DoctorId = 5,
                            MedicalProblem = "Migraine",
                            Notes = "Appointment rescheduled due to patient availability issues.",
                            PatientId = 5,
                            Status = 3,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7604)
                        });
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7677),
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7677)
                        },
                        new
                        {
                            Id = 2,
                            AvailableDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7681),
                            DoctorId = 2,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7682)
                        },
                        new
                        {
                            Id = 3,
                            AvailableDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7686),
                            DoctorId = 3,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7686)
                        },
                        new
                        {
                            Id = 4,
                            AvailableDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7690),
                            DoctorId = 4,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7690)
                        },
                        new
                        {
                            Id = 5,
                            AvailableDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7694),
                            DoctorId = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7694)
                        });
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7462),
                            Name = "Dr. Smith",
                            Specialty = "Cardiology",
                            UpdatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7494),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7496),
                            Name = "Dr. Johnson",
                            Specialty = "Orthopedics",
                            UpdatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7496),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7498),
                            Name = "Dr. Brown",
                            Specialty = "Neurology",
                            UpdatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7498),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7500),
                            Name = "Dr. Taylor",
                            Specialty = "Dermatology",
                            UpdatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7500),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7502),
                            Name = "Dr. Lee",
                            Specialty = "Pediatrics",
                            UpdatedAt = new DateTime(2024, 11, 15, 13, 1, 40, 702, DateTimeKind.Local).AddTicks(7503),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7526),
                            Email = "john_doe@example.com",
                            Name = "John Doe",
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7526),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7527),
                            Email = "jane_doe@example.com",
                            Name = "Jane Doe",
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7527),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7528),
                            Email = "mark_smith@example.com",
                            Name = "Mark Smith",
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7529),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7530),
                            Email = "emily_brown@example.com",
                            Name = "Emily Brown",
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7530),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7356),
                            Email = "admin@example.com",
                            Password = "admin123",
                            Role = 0,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7356),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7358),
                            Email = "john_doe@example.com",
                            Password = "password123",
                            Role = 2,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7358),
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7360),
                            Email = "jane_doe@example.com",
                            Password = "password123",
                            Role = 2,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7360),
                            Username = "jane_doe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7361),
                            Email = "dr_smith@example.com",
                            Password = "doctor123",
                            Role = 1,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7361),
                            Username = "dr_smith"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7362),
                            Email = "dr_jones@example.com",
                            Password = "doctor123",
                            Role = 1,
                            UpdatedAt = new DateTime(2024, 11, 15, 18, 1, 40, 702, DateTimeKind.Utc).AddTicks(7363),
                            Username = "dr_jones"
                        });
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Appointment", b =>
                {
                    b.HasOne("ClinicAppointmentsApi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Doctor", b =>
                {
                    b.HasOne("ClinicAppointmentsApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicAppointmentsApi.Models.Patient", b =>
                {
                    b.HasOne("ClinicAppointmentsApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
